import React from 'react'; import { SearchIcon, FilterIcon, XIcon } from 'lucide-react'; interface NftFiltersProps { searchTerm: string; setSearchTerm: (term: string) => void; selectedTags: string[]; setSelectedTags: (tags: string[]) => void; availableTags: string[]; sortBy: 'newest' | 'az' | 'za'; setSortBy: (sort: 'newest' | 'az' | 'za') => void; showMintedOnly: boolean; setShowMintedOnly: (show: boolean) => void; showUnmintedOnly: boolean; setShowUnmintedOnly: (show: boolean) => void; } export const NftFilters: React.FC<NftFiltersProps> = ({ searchTerm, setSearchTerm, selectedTags, setSelectedTags, availableTags, sortBy, setSortBy, showMintedOnly, setShowMintedOnly, showUnmintedOnly, setShowUnmintedOnly }) => { const handleTagToggle = (tag: string) => { if (selectedTags.includes(tag)) { setSelectedTags(selectedTags.filter(t => t !== tag)); } else { setSelectedTags([...selectedTags, tag]); } }; const clearAllFilters = () => { setSearchTerm(''); setSelectedTags([]); setShowMintedOnly(false); setShowUnmintedOnly(false); }; const hasActiveFilters = searchTerm || selectedTags.length > 0 || showMintedOnly || showUnmintedOnly; return ( <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6"> {/* Search Bar */} <div className="relative mb-4"> <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" /> <input type="text" placeholder="Search NFT collections..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500" /> </div> {/* Filter Row */} <div className="flex flex-wrap gap-4 items-center"> {/* Sort Dropdown */} <div className="flex items-center gap-2"> <label className="text-sm font-medium text-gray-700"> Sort by: </label> <select value={sortBy} onChange={(e) => setSortBy(e.target.value as 'newest' | 'az' | 'za')} className="px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" > <option value="newest">Newest First</option> <option value="az">A-Z</option> <option value="za">Z-A</option> </select> </div> {/* Mint Status Filters */} <div className="flex items-center gap-3"> <label className="flex items-center gap-2 cursor-pointer"> <input type="checkbox" checked={showMintedOnly} onChange={(e) => { setShowMintedOnly(e.target.checked); if (e.target.checked) setShowUnmintedOnly(false); }} className="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 focus:ring-2" /> <span className="text-sm text-gray-700"> Minted Only </span> </label> <label className="flex items-center gap-2 cursor-pointer"> <input type="checkbox" checked={showUnmintedOnly} onChange={(e) => { setShowUnmintedOnly(e.target.checked); if (e.target.checked) setShowMintedOnly(false); }} className="w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500 focus:ring-2" /> <span className="text-sm text-gray-700"> Unminted Only </span> </label> </div> {/* Clear Filters */} {hasActiveFilters && ( <button onClick={clearAllFilters} className="flex items-center gap-1 px-3 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors" > <XIcon className="w-4 h-4" /> Clear Filters </button> )} </div> {/* Tags Filter */} {availableTags.length > 0 && ( <div className="mt-4"> <div className="flex items-center gap-2 mb-2"> <FilterIcon className="w-4 h-4 text-gray-500" /> <span className="text-sm font-medium text-gray-700"> Filter by tags: </span> </div> <div className="flex flex-wrap gap-2"> {availableTags.map((tag) => ( <button key={tag} onClick={() => handleTagToggle(tag)} className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${ selectedTags.includes(tag) ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' }`} > {tag} </button> ))} </div> </div> )} {/* Active Filters Summary */} {hasActiveFilters && ( <div className="mt-4 pt-3 border-t border-gray-200"> <div className="text-sm text-gray-600"> Active filters: {' '} {searchTerm && ( <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md mr-2"> &quot;{searchTerm}&quot; </span> )} {selectedTags.map((tag) => ( <span key={tag} className="bg-purple-100 text-purple-800 px-2 py-1 rounded-md mr-2"> {tag} </span> ))} {showMintedOnly && ( <span className="bg-green-100 text-green-800 px-2 py-1 rounded-md mr-2"> Minted Only </span> )} {showUnmintedOnly && ( <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-md mr-2"> Unminted Only </span> )} </div> </div> )} </div> ); }; interface NftFiltersProps { searchTerm: string; setSearchTerm: (term: string) => void; selectedTags: string[]; setSelectedTags: (tags: string[]) => void; availableTags: string[]; sortBy: 'newest' | 'az' | 'za'; setSortBy: (sort: 'newest' | 'az' | 'za') => void; showMintedOnly: boolean; setShowMintedOnly: (show: boolean) => void; showUnmintedOnly: boolean; setShowUnmintedOnly: (show: boolean) => void; } export const NftFilters: React.FC<NftFiltersProps> = ({ searchTerm, setSearchTerm, selectedTags, setSelectedTags, availableTags, sortBy, setSortBy, showMintedOnly, setShowMintedOnly, showUnmintedOnly, setShowUnmintedOnly }) => { const { t } = useTranslation(); const handleTagToggle = (tag: string) => { if (selectedTags.includes(tag)) { setSelectedTags(selectedTags.filter(t => t !== tag)); } else { setSelectedTags([...selectedTags, tag]); } }; const clearAllFilters = () => { setSearchTerm(''); setSelectedTags([]); setShowMintedOnly(false); setShowUnmintedOnly(false); }; const hasActiveFilters = searchTerm || selectedTags.length > 0 || showMintedOnly || showUnmintedOnly; return ( <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6"> {/* Search Bar */} <div className="relative mb-4"> <SearchIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" /> <input type="text" placeholder={t('nft.search.placeholder')} value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-500" /> </div> {/* Filter Row */} <div className="flex flex-wrap gap-4 items-center"> {/* Sort Dropdown */} <div className="flex items-center gap-2"> <label className="text-sm font-medium text-gray-700"> {t('nft.sort.label')}: </label> <select value={sortBy} onChange={(e) => setSortBy(e.target.value as 'newest' | 'az' | 'za')} className="px-3 py-2 border border-gray-300 rounded-lg bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm" > <option value="newest">{t('nft.sort.newest')}</option> <option value="az">{t('nft.sort.az')}</option> <option value="za">{t('nft.sort.za')}</option> </select> </div> {/* Mint Status Filters */} <div className="flex items-center gap-3"> <label className="flex items-center gap-2 cursor-pointer"> <input type="checkbox" checked={showMintedOnly} onChange={(e) => { setShowMintedOnly(e.target.checked); if (e.target.checked) setShowUnmintedOnly(false); }} className="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 focus:ring-2" /> <span className="text-sm text-gray-700"> {t('nft.filter.mintedOnly')} </span> </label> <label className="flex items-center gap-2 cursor-pointer"> <input type="checkbox" checked={showUnmintedOnly} onChange={(e) => { setShowUnmintedOnly(e.target.checked); if (e.target.checked) setShowMintedOnly(false); }} className="w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500 focus:ring-2" /> <span className="text-sm text-gray-700"> {t('nft.filter.unmintedOnly')} </span> </label> </div> {/* Clear Filters */} {hasActiveFilters && ( <button onClick={clearAllFilters} className="flex items-center gap-1 px-3 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors" > <XIcon className="w-4 h-4" /> {t('nft.filter.clear')} </button> )} </div> {/* Tags Filter */} {availableTags.length > 0 && ( <div className="mt-4"> <div className="flex items-center gap-2 mb-2"> <FilterIcon className="w-4 h-4 text-gray-500" /> <span className="text-sm font-medium text-gray-700"> {t('nft.filter.tags')}: </span> </div> <div className="flex flex-wrap gap-2"> {availableTags.map((tag) => ( <button key={tag} onClick={() => handleTagToggle(tag)} className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${ selectedTags.includes(tag) ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' }`} > {tag} </button> ))} </div> </div> )} {/* Active Filters Summary */} {hasActiveFilters && ( <div className="mt-4 pt-3 border-t border-gray-200"> <div className="text-sm text-gray-600"> {t('nft.filter.active')}: {' '} {searchTerm && ( <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md mr-2"> &quot;{searchTerm}&quot; </span> )} {selectedTags.map((tag) => ( <span key={tag} className="bg-purple-100 text-purple-800 px-2 py-1 rounded-md mr-2"> {tag} </span> ))} {showMintedOnly && ( <span className="bg-green-100 text-green-800 px-2 py-1 rounded-md mr-2"> {t('nft.filter.mintedOnly')} </span> )} {showUnmintedOnly && ( <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-md mr-2"> {t('nft.filter.unmintedOnly')} </span> )} </div> </div> )} </div> ); };