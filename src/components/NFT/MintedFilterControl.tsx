import React from 'react'; import { CheckCircle, Clock, AlertTriangle } from 'lucide-react'; import { useTranslation } from '../../lib/i18n'; export type MintedFilter = 'show' | 'hide' | 'only'; interface MintedFilterControlProps { filter: MintedFilter; onFilterChange: (filter: MintedFilter) => void; language: 'en' | 'tr'; isLoading?: boolean; error?: string | null; lastChecked?: Date | null; onRefresh?: () => void; isRateLimited?: boolean; } export function MintedFilterControl({ filter, onFilterChange, language, isLoading = false, error = null, lastChecked = null, onRefresh, isRateLimited = false }: MintedFilterControlProps) { const { t } = useTranslation(language); const getFilterLabel = (filterType: MintedFilter) => { switch (filterType) { case 'show': return t('show_minted'); case 'hide': return t('hide_minted'); case 'only': return t('only_minted'); } }; const getErrorMessage = (errorCode: string) => { switch (errorCode) { case 'INVALID_ADDRESS': return t('invalid_address'); case 'CHAIN_UNAVAILABLE': return language === 'tr' ? 'Ağ kullanılamıyor' : 'Chain unavailable'; case 'RPC_RATE_LIMIT': return t('partial_results'); default: return language === 'tr' ? 'Bir hata oluştu' : 'An error occurred'; } }; return ( <div className="space-y-3"> {/* Filter Buttons */} <div className="flex items-center gap-2"> <span className="text-sm font-medium text-gray-700"> {t('minted_filter')}: </span> <div className="flex rounded-lg bg-gray-100 p-1"> {(['show', 'hide', 'only'] as MintedFilter[]).map((filterType) => ( <button key={filterType} onClick={() => onFilterChange(filterType)} className={`px-3 py-1 rounded-md text-sm font-medium transition-all ${ filter === filterType ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600 hover:text-gray-900' }`} > {getFilterLabel(filterType)} </button> ))} </div> </div> {/* Status and Actions */} <div className="flex items-center gap-3 text-sm"> {/* Loading State */} {isLoading && ( <div className="flex items-center gap-2 text-blue-600"> <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div> <span>{t('loading_minted')}</span> </div> )} {/* Error State */} {error && !isLoading && ( <div className="flex items-center gap-2 text-red-600"> <AlertTriangle className="w-4 h-4" /> <span>{getErrorMessage(error)}</span> </div> )} {/* Success State */} {!error && !isLoading && lastChecked && ( <div className="flex items-center gap-2 text-green-600"> <CheckCircle className="w-4 h-4" /> <span> {t('last_checked')}: {lastChecked.toLocaleTimeString()} </span> </div> )} {/* Rate Limited Warning */} {isRateLimited && ( <div className="flex items-center gap-2 text-amber-600"> <Clock className="w-4 h-4" /> <span className="text-xs">{t('partial_results')}</span> </div> )} {/* Refresh Button */} {onRefresh && ( <button onClick={onRefresh} disabled={isLoading} className="px-3 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-md text-xs font-medium transition-colors" > {t('refresh')} </button> )} </div> </div> ); }